library(rstan)
model <- "#
// negative binomial parameterized as eta (log(mu)) and dispersion (phi)#
// see p286 in stan-reference-2.4.0.pdf#
// a basic GLM example#
data {#
  int<lower=1> N;    // rows of data#
  vector[N] x1;       // predictor#
  vector[N] x2;       // predictor#
  int<lower=0> y[N]; // response#
}#
parameters {#
  real<lower=0> phi; // neg. binomial dispersion parameter#
  real b0;  // intercept#
  real b1;  // slope#
  real b2;  // slope#
}#
model {#
  // priors:#
  phi ~ cauchy(0, 3);#
  b0 ~ normal(0, 5);#
  b1 ~ normal(0, 5);#
  b2 ~ normal(0, 5);#
  // data model:#
  y ~ neg_binomial_2_log(b0 + b1 * x1 + b2 * x2, phi);#
}#
"#
write(model, file = "negbin-glm.stan")#
#
sm <- stan_model("negbin-glm.stan")#
#
## simulate fake data using the negative binomial, phi=theta#
set.seed(123)#
N <- 100#
phi <- 1.5#
b0 <- 1#
b1 <- 3#
b2 <-1.5#
b3 <- 1#
x1 <- rep(0:1, length.out = N)#
x2 <- rep(0:1, length.out = N)#
#y <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2 + b3*(x1 - mean(x1))*(x2 - mean(x2)))#
y_2var <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2))#
plot(x, y_2var)#
#
m <- sampling(sm, data = list(N = N, y = y_2var, x1 = x1 - mean(x1), x2 = x2 - mean(x2)),#
  pars = c("b0", "b1", "b2", "phi"),#
  iter = 4000, chains = 1)
model <- "#
// negative binomial parameterized as eta (log(mu)) and dispersion (phi)#
// see p286 in stan-reference-2.4.0.pdf#
// a basic GLM example#
data {#
  int<lower=1> N;    // rows of data#
  vector[N] x1;       // predictor#
  vector[N] x2;       // predictor#
  int<lower=0> y[N]; // response#
}#
parameters {#
  real<lower=0> phi; // neg. binomial dispersion parameter#
  real b0;  // intercept#
  real b1;  // slope#
  real b2;  // slope#
}#
model {#
  // priors:#
  phi ~ cauchy(0, 3);#
  b0 ~ normal(0, 5);#
  b1 ~ normal(0, 5);#
  b2 ~ normal(0, 5);#
  // data model:#
  y ~ neg_binomial_2_log(b0 + b1 * x1 + b2 * x2, phi);#
}#
"#
write(model, file = "negbin-glm.stan")#
#
sm <- stan_model("negbin-glm.stan")#
#
## simulate fake data using the negative binomial, phi=theta#
set.seed(123)#
N <- 100#
phi <- 1.5#
b0 <- 1#
b1 <- 3#
b2 <-1.5#
b3 <- 1#
x1 <- rep(0:1, length.out = N)#
x2 <- rep(0:1, length.out = N)#
#y <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2 + b3*(x1 - mean(x1))*(x2 - mean(x2)))#
y_2var <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2))#
plot(x, y_2var)#
#
m <- sampling(sm, data = list(N = N, y = y_2var, x1 = x1 - mean(x1), x2 = x2 - mean(x2)),#
  pars = c("b0", "b1", "b2", "phi"),#
  iter = 4000, chains = 4, corec=1)
model <- "#
// negative binomial parameterized as eta (log(mu)) and dispersion (phi)#
// see p286 in stan-reference-2.4.0.pdf#
// a basic GLM example#
data {#
  int<lower=1> N;    // rows of data#
  vector[N] x1;       // predictor#
  vector[N] x2;       // predictor#
  int<lower=0> y[N]; // response#
}#
parameters {#
  real<lower=0> phi; // neg. binomial dispersion parameter#
  real b0;  // intercept#
  real b1;  // slope#
  real b2;  // slope#
}#
model {#
  // priors:#
  phi ~ cauchy(0, 3);#
  b0 ~ normal(0, 5);#
  b1 ~ normal(0, 5);#
  b2 ~ normal(0, 5);#
  // data model:#
  y ~ neg_binomial_2_log(b0 + b1 * x1 + b2 * x2, phi);#
}#
"#
write(model, file = "negbin-glm.stan")#
#
sm <- stan_model("negbin-glm.stan")#
#
## simulate fake data using the negative binomial, phi=theta#
set.seed(123)#
N <- 100#
phi <- 1.5#
b0 <- 1#
b1 <- 3#
b2 <-1.5#
b3 <- 1#
x1 <- rep(0:1, length.out = N)#
x2 <- rep(0:1, length.out = N)#
#y <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2 + b3*(x1 - mean(x1))*(x2 - mean(x2)))#
y_2var <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2))#
plot(x, y_2var)#
#
m <- sampling(sm, data = list(N = N, y = y_2var, x1 = x1 - mean(x1), x2 = x2 - mean(x2)),#
  pars = c("b0", "b1", "b2", "phi"),#
  iter = 4000, chains = 4, cores=1)
e <- extract(m, pars = c("b0", "b1", "b2", "phi"))
e
launch_shinystan(m)
library(shinystan)
launch_shinystan(m)
## simulate fake data using the negative binomial, phi=theta#
set.seed(123)#
N <- 1000#
phi <- 1.5#
b0 <- 1#
b1 <- 3#
b2 <-1.5#
b3 <- 1#
x1 <- rep(0:1, length.out = N)#
x2 <- rep(0:1, length.out = N)#
#y <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2 + b3*(x1 - mean(x1))*(x2 - mean(x2)))#
y_2var <- rnbinom(N, size = phi, mu = exp(b0 + (x1 * b1 + (x2* b2))#
plot(x, y_2var)#
#
m <- sampling(sm, data = list(N = N, y = y_2var, x1 = x1 - mean(x1), x2 = x2 - mean(x2)),#
  pars = c("b0", "b1", "b2", "phi"),#
  iter = 4000, chains = 4, cores=1)
y_2var <- rnbinom(N, size = phi, mu = exp(b0 + (x1 * b1 + x2* b2))
)
m <- sampling(sm, data = list(N = N, y = y_2var, x1 = x1 - mean(x1), x2 = x2 - mean(x2)),#
  pars = c("b0", "b1", "b2", "phi"),#
  iter = 4000, chains = 4, cores=1
)
launch_shinystan(m)
summary(m)
e <- extract(m, pars = c("b0", "b1", "b2", "phi"))#
true_pars <- c(b0 = b0, b1 = b1, b2 = b2, phi = phi)#
x_cent <- x1 - mean(x1)#
m_mass <- MASS::glm.nb(y_2var ~ x_cent)#
coefs_mass <- c(coef(m_mass), summary(m_mass)$theta)
coefs_mass
hist(rnorm(1000,0, 5))
x1 <- rep(0:1, length.out = N)
head(x1)
x2 <- rep(0:1, length.out = N)
head(x2)
?rnorm
?rbinom
rbinom(46:54, N, 0.5)
rbinom(0:1, N, 0.5)
N
n <- 5 #
p <- c(0.2, 0.9, 0.15, 0.8, 0.75) #
rbinom(n, 1, p)
rbinom(N, 1, 0.5)
x2 <- rbinom(N, 1, 0.75)
set.seed(123)#
N <- 100#
phi <- 1.5#
b0 <- 1#
b1 <- 3#
b2 <-1.5#
b3 <- 1#
# x1 <- rep(0:1, length.out = N)#
# x2 <- rep(0:1, length.out = N)#
x1 <- rbinom(N, 1, 0.5)#
x2 <- rbinom(N, 1, 0.75)#
#y <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2 + b3*(x1 - mean(x1))*(x2 - mean(x2)))#
y_2var <- rnbinom(N, size = phi, mu = exp(b0 + (x1 - mean(x1)) * b1 + (x2 - mean(x2)) * b2))#
plot(x, y_2var)
m <- sampling(sm, data = list(N = N, y = y_2var, x1 = x1 - mean(x1), x2 = x2 - mean(x2)),#
  pars = c("b0", "b1", "b2", "phi"),#
  iter = 4000, chains = 4, cores=1)
summary(m)
sp1 <- rnorm(50, 150, 10)
sp1
sp1 <- rnorm(50, 150, 7)
sp2 < - sp1+rnorm(50, 0, 2)
sp2 <- sp1+rnorm(50, 0, 2)
yrs <- c(1930:180)
dim(yrs)
length(yrs)
yrs <- c(1930:1980)
length(yrs)
sp1 <- rnorm(51, 150, 7)
sp2 <- sp1+rnorm(51, 0, 2)
plot(sp1~yrs)
plot(sp1~yrs, type="l")
set.seed(77)#
yrs <- c(1930:180)#
sp1 <- rnorm(51, 150, 7)#
sp2 <- sp1+rnorm(51, 0, 2)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", xlim=xlim, ylim=ylim)
set.seed(77)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 7)#
sp2 <- sp1+rnorm(length(yrs), 0, 2)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", xlim=xlim, ylim=ylim)
lines(sp2~yrs, color="pink", xlim=xlim, ylim=ylim)
lines(sp2~yrs, col="pink", xlim=xlim, ylim=ylim)
set.seed(77)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 7)#
sp2 <- sp1-5+rnorm(length(yrs), 0, 5)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="pink", xlim=xlim, ylim=ylim)
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(77)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 7)#
sp2 <- sp1-10+rnorm(length(yrs), 0, 5)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(77)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 4)#
sp2 <- sp1-10+rnorm(length(yrs), 0, 5)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(77)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-10+rnorm(length(yrs), 0, 4)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
## Simple code to make figure 1 for Heather's conceptual paper#
#
set.seed(77)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 6)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(177)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 6)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
rnorm(length(yrs), 0, 6)
set.seed(177)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 7)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(177)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 10)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(177)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 20)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(177)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 3)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
set.seed(177)#
yrs <- c(1930:1980)#
sp1 <- rnorm(length(yrs), 150, 5)#
sp2 <- sp1-7+rnorm(length(yrs), 0, 4)#
#
xlim <- c(1930,2017)#
ylim <- c(110, 190)#
#
plot(sp1~yrs, type="l", col="darkslategray", xlim=xlim, ylim=ylim)#
lines(sp2~yrs, col="darkred", xlim=xlim, ylim=ylim)
density(rnorm(1000, 0, 5))
plot(density(rnorm(1000, 0, 5)))
plot(density(rnorm(100000, 0, 5)))
plot(density(rnorm(100000, 0, 15)))
plot(density(rnorm(100000, 0, 115)))
plot(density(rnorm(100000000, 0, 115)))
plot(density(rnorm(1000000, 0, 115)))
plot(density(rnorm(10000000, 0, 115)))
plot(density(rnorm(100000000, 0, 115)))
plot(density(rnorm(100000000, 0, 10)))
?rnorm
plot(dnorm, 0, 5)
plot(dnorm, 10, 5)
plot(qnorm, 10, 5)
plot(density(qnorm, 0, 10))
plot(density(qnorm(1000, 0, 10))
)
?tnorm
??tnorm
## Clear workspace#
rm(list=ls()) # remove everything currently held in the R memory#
options(stringsAsFactors=FALSE)#
graphics.off()#
#
## Say whether or not you want to run stan!#
runstan = FALSE#
mapsandsummaries = FALSE # these are just summaries for mapping (they're slow but not terribly)#
ncores = 2 # how many cores to use, only applies when runstan=TRUE#
#
## Load libraries#
library(plyr)#
library(dplyr)#
library(tidyr)#
library(rgdal)#
library(ggplot2)#
library(lubridate)#
library(rstan)#
#
## Set working directory#
if(length(grep("Lizzie", getwd())>0)) {#
  setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/limitingcues") #
} else#
  setwd("~/Documents/git/ospree/analyses/limitingcues")#
#
## Grab the data#
betall <- read.csv("input/PEP_betpen.csv", header=TRUE)#
fagall <- read.csv("input/PEP_fagsyl.csv", header=TRUE)#
#
##################################
## Look at the data and format ###
##################################
#
## Let's figure out sites and stages data ...#
betagg <- aggregate(betall[("YEAR")], betall[c("PEP_ID", "BBCH", "National_ID", "LAT", "LON", "ALT")],#
    FUN=length)#
fagagg <- aggregate(fagall[("YEAR")], fagall[c("PEP_ID", "BBCH", "National_ID", "LAT", "LON", "ALT")],#
    FUN=length)#
if(FALSE){#
ggplot(betagg, aes(x=YEAR, fill=as.factor(BBCH))) +#
    geom_histogram(alpha=0.2, position="identity")#
ggplot(fagagg, aes(x=YEAR, fill=as.factor(BBCH))) +#
    geom_histogram(alpha=0.2, position="identity")#
}#
# Well, I guess we will go with 11!#
nrow(betagg)#
nrow(fagagg)#
nrow(subset(betagg, YEAR>19))/nrow(betagg)#
nrow(subset(fagagg, YEAR>19))/nrow(fagagg)#
#
nrow(subset(betagg, YEAR>9))/nrow(betagg)#
nrow(subset(fagagg, YEAR>9))/nrow(fagagg)#
# Hmm, I guess we will start with 20 years ...#
bet20 <- subset(betagg, YEAR>19)#
fag20 <- subset(fagagg, YEAR>19)#
#
# Trying 10 years ...#
bet10 <- subset(betagg, YEAR>9)#
fag10 <- subset(fagagg, YEAR>9)#
#
# Annoying detour to figure out which info is needed for unique ID#
betagg$ID1 <- paste(betagg$PEP_ID, betagg$National_ID)#
betagg$ID2 <- paste(betagg$PEP_ID, betagg$National_ID, betagg$LAT, betagg$LON, betagg$ALT)#
#
length(unique(betagg$PEP_ID))#
length(unique(betagg$National_ID))#
length(unique(betagg$ID1))#
length(unique(betagg$ID2))#
# PEP_ID seems unique#
#
# Subset the data based on the above for now ...#
bet11 <- subset(betall, BBCH==11)#
betuse <- bet11[which(bet11$PEP_ID %in% bet10$PEP_ID),]#
fag11 <- subset(fagall, BBCH==11)#
faguse <- fag11[which(fag11$PEP_ID %in% fag10$PEP_ID),]#
betuse20 <- bet11[which(bet11$PEP_ID %in% bet20$PEP_ID),]#
faguse20 <- fag11[which(fag11$PEP_ID %in% fag20$PEP_ID),]#
#####################################
## Get mean at each site and plot ###
#####################################
#
## summarizing data#
if(mapsandsummaries){#
meanbet <-#
      ddply(betall, c("PEP_ID", "LON", "LAT"), summarise,#
      mean = mean(DAY),#
      mean.yr = mean(YEAR),#
      sd = sd(DAY),#
      sem = sd(DAY)/sqrt(length(DAY)))#
#
meanfag <-#
      ddply(fagall, c("PEP_ID", "LON", "LAT"), summarise,#
      mean = mean(DAY),#
      mean.yr = mean(YEAR),#
      sd = sd(DAY),#
      sem = sd(DAY)/sqrt(length(DAY)))#
#
meanbetuse <-#
      ddply(betuse, c("PEP_ID", "LON", "LAT"), summarise,#
      mean = mean(DAY),#
      mean.yr = mean(YEAR),#
      sd = sd(DAY),#
      sem = sd(DAY)/sqrt(length(DAY)))#
#
meanfaguse <-#
      ddply(faguse, c("PEP_ID", "LON", "LAT"), summarise,#
      mean = mean(DAY),#
      mean.yr = mean(YEAR),#
      sd = sd(DAY),#
      sem = sd(DAY)/sqrt(length(DAY)))#
# get the map and set the theme#
wmap <- readOGR("..//..//..//..//..//general/maps/ne_110m_land", layer="ne_110m_land")#
wmap.df <- fortify(wmap)#
theme.tanmap <- list(theme(panel.grid.minor = element_blank(),#
                        # panel.grid.major = element_blank(),#
                        panel.background = element_rect(fill = "grey90",colour = NA),#
                        # plot.background = element_rect(fill=NA),#
                        axis.title.x = element_blank(),#
                        axis.title.y = element_blank(),#
                        plot.title = element_text(size=22),#
                        legend.position = "left"))#
#
ggplot() + #
  geom_polygon(dat=wmap.df, aes(long, lat, group=group), fill="grey80") +#
  coord_cartesian(ylim=c(30, 75), xlim=c(-15, 40)) +#
  geom_point(data=meanfag, #
             aes(x=LON, y=LAT, fill=mean), #
             colour="dodgerblue4", pch=21) +#
  theme.tanmap#
}#
#
##################################################
## Fit hinge models for each species (in Stan) ###
##################################################
#
betuse$YEAR.hin <- betuse$YEAR#
betuse$YEAR.hin[which(betuse$YEAR.hin<1980)] <- 1980#
betuse$PEP_ID <- as.character(betuse$PEP_ID)#
betuse$YEAR.hin <- betuse$YEAR.hin-1980#
#
faguse$YEAR.hin <- faguse$YEAR#
faguse$YEAR.hin[which(faguse$YEAR.hin<1980)] <- 1980#
faguse$PEP_ID <- as.character(faguse$PEP_ID)#
faguse$YEAR.hin <- faguse$YEAR.hin-1980#
# Note to self: for betula lmer will fit random intercepts but not random slopes#
#
if(runstan) {#
# betula#
N <- nrow(betuse)#
y <- betuse$DAY#
J <- length(unique(betuse$PEP_ID))#
sites <- as.numeric(as.factor((betuse$PEP_ID)))#
year <- betuse$YEAR.hin#
# nVars <-1#
# Imat <- diag(1, nVars)#
#
# Whoa! I think the model runs when I use all data ... must check more!#
fit.hinge.bet <- stan("stan/hinge_randslopesint.stan",#
    data=c("N","J","y","sites","year"), iter=2000, chains=4, cores=ncores)#
    # control = list(adapt_delta = 0.95, max_treedepth = 15))#
#
save(fit.hinge.bet, file="stan/output/fit.hinge.bet.Rda")#
#
# the above model was returning a few divergent transitions (model ran fast but led to 52 div transition and obvious issues in fitting sigma_b) when I ran it on this subset of the data though:#
# betuse <- betuse[1:5000,]#
# This NCP model (below) on the 5K data above returned ALL divergent transitions!#
# fit.hinge.ncp <- stan("stan/hinge_randslopesint_ncp.stan",#
#    data=c("N","J","y","sites","year"), iter=500, chains=4, cores=4)#
# Now do fagus#
Nf <- nrow(faguse)#
yf <- faguse$DAY#
Jf <- length(unique(faguse$PEP_ID))#
sitesf <- as.numeric(as.factor((faguse$PEP_ID)))#
yearf <- faguse$YEAR.hin#
# nVars <-1#
# Imat <- diag(1, nVars)#
#
fit.hinge.fag <- stan("stan/hinge_randslopesint.stan",#
    data=list(N=Nf, J=Jf, y=yf, sites=sitesf, year=yearf), iter=2000, chains=4, cores=ncores)#
#
save(fit.hinge.fag, file="stan/output/fit.hinge.fag.Rda")#
}#
#
# If not running stan, then we load the stan runs here ...#
if(!runstan) {#
# Versions using data with only 20 or more years#
load("stan/output/fit.hinge.20yr.bet.Rda") # mu of 113.4 and -0.35, 5400 sites ("fit.hinge")#
load("stan/output/fit.hinge.20yr.fag.Rda") # mu of 121.4 and -0.34, 6600 sites#
fit.hinge.bet20 <- fit.hinge#
fit.hinge.fag20 <- fit.hinge.fag#
# Below versions use data with 10 years or more#
load("stan/output/fit.hinge.bet.Rda") # mu of 113.5 and -0.35, 9700 sites#
load("stan/output/fit.hinge.fag.Rda") # mu of 121.4 and -0.33, 8300 sites#
}#
####################################
## Get predictions for each species ###
####################################
# Okay, now get predictions, there seems to be no easy way to do this in base Stan:http://discourse.mc-stan.org/t/best-way-to-do-prediction-on-new-data-r-rstan-stanfit/1772/5#
#
# To Do! Below assumes that Stan does not sort my sites, should check this!!!#
sumerf <- summary(fit.hinge.fag)$summary # mu_a is 121 and mu_b is -0.34#
sumerf[grep("mu_", rownames(sumerf)),]#
mean(faguse$YEAR)#
# ... and Betula#
mean(betuse$YEAR)#
sumerb <- summary(fit.hinge.bet)$summary#
sumerb[grep("mu_", rownames(sumerb)),]#
getstanpred <- function(dat, sitecolname, stansummary, predyear){#
    siteslist <- unique(dat[sitecolname])#
    sumer.ints <- stansummary[grep("a\\[", rownames(stansummary)),]#
    sumer.slopes <- stansummary[grep("b\\[", rownames(stansummary)),]#
    stanfit <- data.frame(m=as.numeric(rep(NA, nrow(siteslist))),#
        pred=as.numeric(rep(NA, nrow(siteslist))), site=siteslist)#
    for (sitehere in c(1:nrow(siteslist))){#
        stanfit$m[sitehere] <- sumer.slopes[sitehere]#
        stanfit$pred[sitehere] <- sumer.ints[sitehere]+sumer.slopes[sitehere]*predyear#
    }#
    return(stanfit)#
    }#
# Reminder, 1980 is 0 in our model...#
fagpred <- getstanpred(faguse, "PEP_ID", sumerf, 3)#
betpred <- getstanpred(betuse, "PEP_ID", sumerb, 3)
sitesf <- as.numeric(as.factor((faguse$PEP_ID)))
head(sitesf)
sumerb20 <- summary(fit.hinge.bet20)$summary#
sumerf20 <- summary(fit.hinge.fag20)$summary
dat <- faguse
siteslist <- unique(dat[sitecolname])
sitecolname <- "PEP_ID"
siteslist <- unique(dat[sitecolname])
head(siteslist)
getstanpredALT <- function(dat, sitecolname, stansummary, predyear){#
    sitesconvt <- as.numeric(as.factor((dat[sitecolname])))#
    siteslist <- sort(unique(sitesconvt))#
    sumer.ints <- stansummary[grep("a\\[", rownames(stansummary)),]#
    sumer.slopes <- stansummary[grep("b\\[", rownames(stansummary)),]#
    stanfit <- data.frame(m=as.numeric(rep(NA, nrow(siteslist))),#
        pred=as.numeric(rep(NA, nrow(siteslist))), site=siteslist)#
    for (sitehere in c(1:nrow(siteslist))){#
        stanfit$m[sitehere] <- sumer.slopes[sitehere]#
        stanfit$pred[sitehere] <- sumer.ints[sitehere]+sumer.slopes[sitehere]*predyear#
    }#
    return(stanfit)#
    }
fagpredA <- getstanpredALT(faguse, "PEP_ID", sumerf, 3)
getstanpredALT <- function(dat, sitecolname, stansummary, predyear){#
    sitesconvt <- as.numeric(as.factor((dat[sitecolname])))#
    siteslist <- order(unique(sitesconvt))#
    sumer.ints <- stansummary[grep("a\\[", rownames(stansummary)),]#
    sumer.slopes <- stansummary[grep("b\\[", rownames(stansummary)),]#
    stanfit <- data.frame(m=as.numeric(rep(NA, nrow(siteslist))),#
        pred=as.numeric(rep(NA, nrow(siteslist))), site=siteslist)#
    for (sitehere in c(1:nrow(siteslist))){#
        stanfit$m[sitehere] <- sumer.slopes[sitehere]#
        stanfit$pred[sitehere] <- sumer.ints[sitehere]+sumer.slopes[sitehere]*predyear#
    }#
    return(stanfit)#
    }#
fagpredA <- getstanpredALT(faguse, "PEP_ID", sumerf, 3)
sitesconvt <- as.numeric(as.factor((dat[sitecolname])))
head(dat[sitecolname])
head(as.numeric(as.factor((dat[sitecolname]))))
head(as.factor((dat[sitecolname])))
as.factor((dat[sitecolname])
)
mode(dat[sitecolname])
hist(rnorm(0,200))
hist(rnorm(1000, 0, 200))
hist(rnorm(1000, 0, 10))
hist(rnorm(1000, 150, 20))
## housekeeping#
rm(list=ls()) #
options(stringsAsFactors = FALSE)#
#
# dostan = TRUE#
library(lme4)#
library(rstan)#
library(ggplot2)#
library(shinystan)#
library(bayesplot)#
library(rstanarm)#
#update.packages()#
#
# Setting working directory. Add in your own path in an if statement for your file structure#
 if(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/radcliffe")}#
#
#Goal: Fit a multimodel to phenology (budburst) data with temperature, soil moisture, and #
#their interaction as explanatory variables.#
##
#Step 1: Fit the model with test data to make sure that the model can recover parameters accurately#
###set up data #
n_sp=50#number of species#
obs_sp=30#number of obs (plots, years) per species#
N=n_sp*obs_sp#sample size#
sp<-rep(seq(1:n_sp), each=obs_sp)#species ids#
#
#set up distribution parameters#
mu_a<-150#grand mean mean of bb doy#
sigma_a<-5#
mu_b_temp_sp<--2#
sigma_b_temp_sp<-.1#
mu_b_mois_sp<--1#
sigma_b_mois_sp<-.1#
a_sp<-as.integer(rnorm(n_sp,mu_a,sigma_a))#species specific day of year for bb#
#
b_temp<-rnorm(n_sp,mu_b_temp_sp,sigma_b_temp_sp)#species specific effects of temp#
b_mois<-rnorm(n_sp,mu_b_mois_sp,sigma_b_mois_sp)#species specific effects of mois
#create explanatory variables#
temp<-rep(NA, N)#
for(i in 1:n_sp){#
  temp[which(sp==i)]<-rnorm(obs_sp,25,5)#right now this is set up for each species but it doesn't need to be right?#
}#
mois<-rep(NA, N)#
for(i in 1:n_sp){#
  mois[which(sp==i)]<-rnorm(obs_sp,20,1)#
}
hist(temp)
hist(mois)
#M2: now try model with interaction:#
mu_b_tm_sp<-.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction
hist(b_tm)
b_tm
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*temp[i] * mois[i]#
}#
#
y<-rnorm(N,ypred,sigma_y)#
#check that test data look ok#
plot(temp,y)#
plot(mois,y)#
hist(mois)
## housekeeping#
rm(list=ls()) #
options(stringsAsFactors = FALSE)#
#
# dostan = TRUE#
library(lme4)#
library(rstan)#
library(ggplot2)#
library(shinystan)#
library(bayesplot)#
library(rstanarm)#
#update.packages()#
#
# Setting working directory. Add in your own path in an if statement for your file structure#
 if(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/radcliffe")}#
#
#Goal: Fit a multimodel to phenology (budburst) data with temperature, soil moisture, and #
#their interaction as explanatory variables.#
##
#Step 1: Fit the model with test data to make sure that the model can recover parameters accurately#
###set up data #
n_sp=50#number of species#
obs_sp=30#number of obs (plots, years) per species#
N=n_sp*obs_sp#sample size#
sp<-rep(seq(1:n_sp), each=obs_sp)#species ids#
#
#set up distribution parameters#
mu_a<-150#grand mean mean of bb doy#
sigma_a<-5#
mu_b_temp_sp<--2#
sigma_b_temp_sp<-.1#
mu_b_mois_sp<--1#
sigma_b_mois_sp<-.1#
a_sp<-as.integer(rnorm(n_sp,mu_a,sigma_a))#species specific day of year for bb#
#
b_temp<-rnorm(n_sp,mu_b_temp_sp,sigma_b_temp_sp)#species specific effects of temp#
b_mois<-rnorm(n_sp,mu_b_mois_sp,sigma_b_mois_sp)#species specific effects of mois#
#
#create explanatory variables#
temp<-rep(NA, N)#
for(i in 1:n_sp){#
  temp[which(sp==i)]<-rnorm(obs_sp,25,5)#right now this is set up for each species but it doesn't need to be right?#
}#
mois<-rep(NA, N)#
for(i in 1:n_sp){#
  mois[which(sp==i)]<-rnorm(obs_sp,20,1)#
}#
#
#temp<-rep(rnorm(obs_sp,25,5), n_sp)#
#mois<-rep(rnorm(obs_sp,.2,.1),n_sp)#
#
#b_temp<--2#effect of temp#
#b_mois<-2#effect of soil moisture#
#model without interaction#
sigma_y<-.5#
#
#generate the response variable, ypred#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]#
}#
#
y<-rnorm(N,ypred,sigma_y)#
#check that test data look ok#
plot(temp,y)#
plot(mois,y)#
hist(mois)#
#try model in lmer#
testm1.lmer<-lmer(y~temp + mois +(temp+mois|sp))#
summary(testm1.lmer)#looks good!#
#
#now fit the model in stan#
testm1 = stan('Analyses/soilmoisture/M1_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois, n_sp=n_sp,N=N),#
              iter = 2500, warmup=1500) # #
beta_draws<-as.matrix(testm1,pars=c("b_temp","b_mois","sigma_y"))#
mcmc_intervals(beta_draws)#
head(summary(testm1)$summary)#
summary(testm1)$summary#
launch_shinystan(testm1)#this can be slow#
#
#M2: now try model with interaction:#
mu_b_tm_sp<-.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*temp[i] * mois[i]#
}#
#
y<-rnorm(N,ypred,sigma_y)#
#check that test data look ok#
plot(temp,y)#
plot(mois,y)#
hist(mois)#
#try model in lmer#
testm2.lmer<-lmer(y~temp * mois +(temp*mois|sp))#fails to converge#
summary(testm2.lmer)#parameters actually look ok though...
#M3: With site added as intercept only random effect#
n_site=10#number of sites#
obs_site=N/n_site#number of obs (plots, years) per site (N is defined above)#
sigma_a_site<-5#
a_site<-as.integer(rnorm(n_site,mu_a,sigma_a_site))#site specific day of year for bb#
#is this right? use grand mean again (as for species? just variance is different)#
#not sure if more variance among site or species makes more sense...i made site-level variance smaller for now#
#
site<-rep(seq(1:n_site), each=obs_site)#site ids#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_site[site[i]] + a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*temp[i] * mois[i]#
}#
#
y<-rnorm(N,ypred,sigma_y)#
#check that test data look ok#
plot(temp,y)#
plot(mois,y)#
hist(mois)#
#try model in lmer
plot(temp,y)
#now fit the model in stan#
testm3 = stan('Analyses/soilmoisture/M3_bbd.stan', data=list(y=y,sp=sp,temp=temp, mois=mois,n_sp=n_sp,n_site=n_site,N=N),#
              iter = 2500, warmup=1500)
setwd("~/Documents/git/projects/meta_ep2/radcliffe")
#now fit the model in stan#
testm3 = stan('Analyses/soilmoisture/M3_bbd.stan', data=list(y=y,sp=sp,temp=temp, mois=mois,n_sp=n_sp,n_site=n_site,N=N),#
              iter = 2500, warmup=1500)
#now fit the model in stan#
testm3 = stan('Analyses/soilmoisture/M2_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois,n_sp=n_sp,n_site=n_site,N=N),#
              iter = 2500, warmup=1500)
#Step 1: Fit the model with test data to make sure that the model can recover parameters accurately#
###set up data #
n_sp=50#number of species#
obs_sp=30#number of obs (plots, years) per species#
N=n_sp*obs_sp#sample size#
sp<-rep(seq(1:n_sp), each=obs_sp)#species ids#
#
#set up distribution parameters#
mu_a<-150#grand mean mean of bb doy#
sigma_a<-5#
mu_b_temp_sp<--2#
sigma_b_temp_sp<-.1#
mu_b_mois_sp<--1#
sigma_b_mois_sp<-.1
sp
a_sp<-as.integer(rnorm(n_sp,mu_a,sigma_a))#species specific day of year for bb
a_sp
b_temp<-rnorm(n_sp,mu_b_temp_sp,sigma_b_temp_sp)#species specific effects of temp#
b_mois<-rnorm(n_sp,mu_b_mois_sp,sigma_b_mois_sp)#species specific effects of mois
b_temp
#create explanatory variables#
temp<-rep(NA, N)#
for(i in 1:n_sp){#
  temp[which(sp==i)]<-rnorm(obs_sp,25,5)#right now this is set up for each species but it doesn't need to be right?#
}#
mois<-rep(NA, N)#
for(i in 1:n_sp){#
  mois[which(sp==i)]<-rnorm(obs_sp,20,1)#
}
head(temp)
sigma_y<-.5
sp
#generate the response variable, ypred#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]#
}
plot(ypred~temp)
plot(ypred~mois)
#M2: now try model with interaction:#
mu_b_tm_sp<-.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*temp[i] * mois[i]#
}
plot(ypred~mois)
plot(ypred~temp)
plot(ypred~temp*mois)
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
plot(ypred~temp*mois)
plot(ypred~mois)
b_tm
temp*mois
plot(ypred~(temp*mois))
goo <- temp*mois
plot(ypred~goo)
mu_b_tm_sp<-0#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.00001#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.001#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
y<-rnorm(N,ypred,sigma_y)
plot(y~temp)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.5#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(y~temp)
plot(y~mois)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(y~mois)
plot(y~temp)
plot(ypred~temp)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.01#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.5#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
-1*-2*0.1
#M2: now try model with interaction:#
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
plot(ypred~mois)
goo <- temp*mois
plot(ypred~goo)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.01#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~goo)
goo <- temp*mois
plot(ypred~goo)
plot(ypred~mois)
plot(ypred~mois)
plot(ypred~temp)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
plot(ypred~temp)
goo <- temp*mois
plot(ypred~goo)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.5#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
goo <- temp*mois
plot(ypred~goo)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
par(mfrow=c(1,3))
goo <- temp*mois
plot(ypred~temp)
plot(ypred~mois, main="0.1")
plot(ypred~goo)
#M2: now try model with interaction:#
mu_b_tm_sp<-0.05#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
goo <- temp*mois
quartz()
par(mfrow=c(1,3))
goo <- temp*mois
plot(ypred~temp)
plot(ypred~mois, main="0.05")
plot(ypred~goo, main="0.05")
#M2: now try model with interaction:#
mu_b_tm_sp<-0.5#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
quartz()
par(mfrow=c(1,3))
plot(ypred~temp)
goo <- temp*mois
plot(ypred~goo, main="0.5")
plot(ypred~mois, main="0.5")
#M2: now try model with interaction:#
mu_b_tm_sp<-0.2#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
goo <- temp*mois
plot(ypred~mois, main="0.5")
plot(ypred~goo, main="0.5")
#M2: now try model with interaction:#
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
goo*0.1
b_temp*temp
b_mois*mois
a_site
a_sp
b_temp*temp
a_sp
ypred
mu_b_tm_sp<-0.5#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
ypred
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
ypred
mu_b_tm_sp<-0.5#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
ypred
a_sp
b_temp*temp
b_mois*temp
b_mois*mois
b_tm*goo
mu_b_tm_sp
mu_b_tm_sp<-0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}
b_tm*goo
#M2: now try model with interaction:#
mu_b_tm_sp<--0.1#
sigma_b_tm_sp<-.005#
b_tm<-rnorm(n_sp,mu_b_tm_sp,sigma_b_tm_sp)#species specific interaction#
#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]+ b_tm[sp[i]]*(temp[i] * mois[i])#
}#
#
y<-rnorm(N,ypred,sigma_y)
b_tm*goo
## housekeeping#
rm(list=ls()) #
options(stringsAsFactors = FALSE)#
#
# dostan = TRUE#
library(lme4)#
library(rstan)#
library(ggplot2)#
library(shinystan)#
library(bayesplot)#
library(rstanarm)#
#update.packages()#
#
# Setting working directory. Add in your own path in an if statement for your file structure#
 if(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/radcliffe")}#
#
#Goal: Fit a multimodel to phenology (budburst) data with temperature, soil moisture, and #
#their interaction as explanatory variables.#
##
#Step 1: Fit the model with test data to make sure that the model can recover parameters accurately#
###set up data #
n_sp=50#number of species#
obs_sp=30#number of obs (plots, years) per species#
N=n_sp*obs_sp#sample size#
sp<-rep(seq(1:n_sp), each=obs_sp)#species ids#
#
#set up distribution parameters#
mu_a<-150#grand mean mean of bb doy#
sigma_a<-5#
mu_b_temp_sp<--2#
sigma_b_temp_sp<-.1#
mu_b_mois_sp<--1#
sigma_b_mois_sp<-.1#
a_sp<-as.integer(rnorm(n_sp,mu_a,sigma_a))#species specific day of year for bb#
#
b_temp<-rnorm(n_sp,mu_b_temp_sp,sigma_b_temp_sp)#species specific effects of temp#
b_mois<-rnorm(n_sp,mu_b_mois_sp,sigma_b_mois_sp)#species specific effects of mois#
#
#create explanatory variables#
temp<-rep(NA, N)#
for(i in 1:n_sp){#
  temp[which(sp==i)]<-rnorm(obs_sp,25,5)#right now this is set up for each species but it doesn't need to be right?#
}#
mois<-rep(NA, N)#
for(i in 1:n_sp){#
  mois[which(sp==i)]<-rnorm(obs_sp,20,1)#
}#
#
#temp<-rep(rnorm(obs_sp,25,5), n_sp)#
#mois<-rep(rnorm(obs_sp,.2,.1),n_sp)#
#
#b_temp<--2#effect of temp#
#b_mois<-2#effect of soil moisture#
#model without interaction#
sigma_y<-.5#
#
#generate the response variable, ypred#
ypred<-c()#
for(i in 1:N){#
  ypred[i] = a_sp[sp[i]] + b_temp[sp[i]] * temp[i] + b_mois[sp[i]] * mois[i]#
}#
#
y<-rnorm(N,ypred,sigma_y)#
#check that test data look ok#
plot(temp,y)#
plot(mois,y)#
hist(mois)#
#try model in lmer#
testm1.lmer<-lmer(y~temp + mois +(temp+mois|sp))#
summary(testm1.lmer)#looks good!
testm2.lmer<-lmer(y~temp * mois +(1|sp))#fails to converge
summary(testm2.lmer)
testm1.lmer<-lmer(y~temp + mois +(1|sp))#
summary(testm1.lmer)#looks good!
N
length(temp)
length(mois)
testm1 = stan('Analyses/soilmoisture/M1_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois, n_sp=n_sp,N=N),#
              iter = 2500, warmup=1500)
testm1 = stan('Analyses/soilmoisture/M1_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois, n_sp=n_sp,N=N),#
              iter = 2500, warmup=1500, ncores=1)
testm1 = stan('Analyses/soilmoisture/M1_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois, n_sp=n_sp,N=N),#
              iter = 2500, warmup=1500, ncores=1)
library(rstan)
testm1 = stan('Analyses/soilmoisture/M1_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois, n_sp=n_sp,N=N),#
              iter = 2500, warmup=1500, ncores=1)
testm1
testm1 = stan('Analyses/soilmoisture/M1_bbd_testdata.stan', data=list(y=y,sp=sp,temp=temp, mois=mois, n_sp=n_sp,N=N),#
              iter = 2500, warmup=1500)
